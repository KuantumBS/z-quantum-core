# Workflow API version
apiVersion: io.orquestra.workflow/1.0.0

# Prefix for workflow ID
name: optimize-circuit

imports:
  - name: z-quantum-core
    type: git
    parameters:
      repository: "git@github.com:zapatacomputing/z-quantum-core.git"
      branch: "dev"
  - name: qe-openfermion
    type: git
    parameters:
      repository: "git@github.com:zapatacomputing/qe-openfermion.git"
      branch: "dev"

steps:
  - name: get-initial-parameters
    config:
      runtime:
        language: python3
        imports: [z-quantum-core]
        parameters:
          file: z-quantum-core/steps/circuit.py
          function: generate_random_ansatz_params
      resources:
        cpu: "1000m"
        memory: "1Gi"
        disk: "10Gi"
    inputs:
      - ansatz_specs: '{"module_name": "zquantum.core.interfaces.mock_objects", "function_name": "MockAnsatz", "number_of_layers": 2, "problem_size": 4}'
        type: string
      - min_value: -1.57
        type: float
      - max_value: 1.57
        type: float
      - seed: 9
        type: int
      - number_of_parameters: "None"
        type: string
    outputs:
      - name: params
        type: ansatz-params

  - name: get-operator
    config:
      runtime:
        language: python3
        imports: [z-quantum-core, qe-openfermion]
        parameters:
          file: qe-openfermion/steps/operators.py
          function: get_fermion_number_operator
      resources:
        cpu: "1000m"
        memory: "1Gi"
        disk: "10Gi"
    inputs:
      - number_of_qubits: 4
        type: int
      - number_of_particles: "None"
        type: string
    outputs:
      - name: number-operator
        type: operator

  - name: transform-operator
    passed: [get-operator]
    config:
      runtime:
        language: python3
        imports: [z-quantum-core, qe-openfermion]
        parameters:
          file: qe-openfermion/steps/transforms.py
          function: transform_interaction_operator
      resources:
        cpu: "1000m"
        memory: "1Gi"
        disk: "10Gi"
    inputs:
      - transformation: "Jordan-Wigner"
        type: string
      - input_operator: ((get-operator.number-operator))
        type: operator
    outputs:
      - name: transformed-operator
        type: operator

  - name: evaluate-ansatz-based-cost-function
    passed: [get-initial-parameters, transform-operator]
    config:
      runtime:
        language: python3
        imports: [z-quantum-core, qe-openfermion]
        parameters:
          file: z-quantum-core/steps/measure.py
          function: evaluate_ansatz_based_cost_function
      resources:
        cpu: "1000m"
        memory: "2Gi"
    inputs:
      - ansatz_specs: '{"module_name": "zquantum.core.interfaces.mock_objects", "function_name": "MockAnsatz", "number_of_layers": 2, "problem_size": 4}'
        type: string
      - backend_specs: '{"module_name": "zquantum.core.interfaces.mock_objects", "function_name": "MockQuantumSimulator", "n_samples": 10}'
        type: string
      - cost_function_specs: '{"module_name": "zquantum.core.cost_function", "function_name": "AnsatzBasedCostFunction", "estimator-specs": {"module_name": "zquantum.core.estimator", "function_name": "ExactEstimator"}}'
        type: string
      - qubit_operator: ((transform-operator.transformed-operator))
        type: operator
      - ansatz_parameters: ((get-initial-parameters.params))
        type: ansatz-params
      - noise_model: "None"
        type: string
      - device_connectivity: "None"
        type: string
    outputs:
      - name: value_estimate
        type: value-estimate

types:
  - ansatz-params
  - operator
  - value-estimate
